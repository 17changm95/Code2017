// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc253.Code2017;

import org.usfirst.frc253.Code2017.commands.*;
import org.usfirst.frc253.Code2017.subsystems.Climber;
import org.usfirst.frc253.Code2017.subsystems.Gate;
import org.usfirst.frc253.Code2017.subsystems.GearFlip;
import org.usfirst.frc253.Code2017.subsystems.SensorData;
import org.usfirst.frc253.Code2017.subsystems.Servo;
//import org.usfirst.frc253.Code2017.subsystems.Servo;
import org.usfirst.frc253.Code2017.subsystems.Shooter;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
//import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	
	Command autonomousCommand;
    SendableChooser autoChooser;

    public static OI oi;
    public static Drivetrain drivetraintank;
    public static GearFlip gearFlip;
    public static Shooter shooter;
    public static Gate gate;
    public static Climber climber;
    public static SensorData sensorData;
    public static Servo servo;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

//    public static RobotDrive robotdrive; 
//    
   

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	LiveWindow.run();
    	// turns on automatic mode
    	RobotMap.init();
    	
    	CameraServer.getInstance().startAutomaticCapture();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        drivetraintank = new Drivetrain();
        
        //copied from org.usfirst.frc253.robotComponents
        gearFlip = new GearFlip();
        shooter = new Shooter();
        gate = new Gate();
        climber = new Climber();
        sensorData = new SensorData();
        servo = new Servo();
        
        autoChooser = new SendableChooser();
        autoChooser.addDefault("Center Position", new AutoCenter()); // add command as default
        autoChooser.addObject("Right Position", new AutoRight());	// add another command
        autoChooser.addObject("Left Position", new AutoLeft());
        SmartDashboard.putData("Autonomous mode chooser", autoChooser);

//        robotdrive = 
        
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
      

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        autonomousCommand = new AutonomousCommand();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
     

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */}
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	autonomousCommand = (Command) autoChooser.getSelected();
    	autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	 Scheduler.getInstance().run();
    }
    public void teleopInit() {
    	if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}