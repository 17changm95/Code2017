// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc253.Code2017.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Timer;

import org.usfirst.frc253.Code2017.Robot;

import edu.wpi.first.wpilibj.Ultrasonic;
/**
 *
 */
public class GearAutoCorrect extends Command {

	Ultrasonic ultra1;
	Ultrasonic ultra2;

    public GearAutoCorrect() {
    	
    	requires(Robot.drivetraintank);

    	//copied from org.usfirst.frc253.Code2016.commands.UltraSound2
    	ultra1 = new Ultrasonic(3,2); //arbitrary arguments for now
    	ultra1.setAutomaticMode(true);
    	ultra2 = new Ultrasonic(5,4);
    	ultra2.setAutomaticMode(true);
    	
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	double range1 = ultra1.getRangeInches();
    	double range2 = ultra2.getRangeInches();
    	boolean isAligned = false;
    	SmartDashboard.putBoolean("Is the gear aligned?", isAligned);
    	
    	if(Math.abs(range1 - range2) < 3.0){
    		isAligned = true;
    	} else {
    		isAligned = false;
    		if(range1 > range2){
    			Timer myTimer = new Timer();
    			myTimer.reset();
    			myTimer.start();
    			if(myTimer.get() < 1){
    				Robot.drivetraintank.setLeft_Back(.5);
        	    	Robot.drivetraintank.setLeft(.5);
        	    	Robot.drivetraintank.setRight(.6);
        	    	Robot.drivetraintank.setRight_Back(.6);
    			} else if (myTimer.get() < 2){
    				Robot.drivetraintank.setLeft_Back(-.5);
        	    	Robot.drivetraintank.setLeft(-.5);
        	    	Robot.drivetraintank.setRight(-1);
        	    	Robot.drivetraintank.setRight_Back(-1);
    			}
    			myTimer.stop();
    		} else if(range1 < range2){
    			Timer myTimer = new Timer();
    			myTimer.reset();
    			myTimer.start();
    			if(myTimer.get() < 1){
    				Robot.drivetraintank.setLeft_Back(.5);
        	    	Robot.drivetraintank.setLeft(.5);
        	    	Robot.drivetraintank.setRight(.6);
        	    	Robot.drivetraintank.setRight_Back(.6);
    			} else if (myTimer.get() < 2){
    				Robot.drivetraintank.setLeft_Back(-1);
        	    	Robot.drivetraintank.setLeft(-1);
        	    	Robot.drivetraintank.setRight(-.5);
        	    	Robot.drivetraintank.setRight_Back(-.5);
    			}
    			myTimer.stop();
    		}
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drivetraintank.setLeft_Back(0);
    	Robot.drivetraintank.setLeft(0);
    	Robot.drivetraintank.setRight(0);
    	Robot.drivetraintank.setRight_Back(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
